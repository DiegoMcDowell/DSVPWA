name: CI/CD con SAST y DAST para DSVPWA

on: [push, pull_request]

jobs:
  sast:
    runs-on: self-hosted

    steps:
      - name: Checkout del código
        uses: actions/checkout@v3

      - name: Instalar dependencias Python
        run: pip install bandit pylint

      - name: Analizar con Bandit
        run: bandit -r dsvpwa -f html -o bandit_report.html || true

      - name: Analizar con Pylint
        run: pylint dsvpwa/*.py || true

      - name: Ejecutar SonarQube Scanner (local)
        run: sonar-scanner || true

      - name: Subir reporte Bandit
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit_report.html

  dast:
    runs-on: self-hosted
    needs: sast
    steps:
      - uses: actions/checkout@v3

      - name: Limpiar contenedor anterior
        run: docker rm -f vulnerable-app || true

      - name: Build imagen app
        run: docker build -t dsvpwa .

      - name: Levantar app (expuesta en localhost)
        run: docker run -d --name vulnerable-app -p 127.0.0.1:65413:65413 dsvpwa

      - name: Healthcheck HTTP
        run: |
          echo "⌛ Esperando http://127.0.0.1:65413"
          for i in {1..15}; do
            if curl -s -f http://127.0.0.1:65413 >/dev/null; then
              echo "✔ OK"
              exit 0
            fi
            echo "…"
            sleep 2
          done
          echo "❌ No respondió"
          docker logs vulnerable-app || true
          exit 1

      - name: ZAP local (sin Docker)
        run: |
          /Applications/ZAP.app/Contents/MacOS/ZAP.sh \
            -cmd \
            -quickurl http://127.0.0.1:65413 \
            -quickout zap_report.html \
            -quickprogress || true

      - name: Verificar reporte
        run: test -f zap_report.html

      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html

      - name: Cleanup
        if: always()
        run: docker rm -f vulnerable-app || true
