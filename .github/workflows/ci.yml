# .github/workflows/ci-cd.yml
name: CI/CD con SAST y DAST para DSVPWA

on:
  - push
  - pull_request

jobs:
  # --------------------
  # 1) SAST (est√°tico)
  # --------------------
  sast:
    runs-on: self-hosted

    steps:
      - name: Checkout del c√≥digo
        uses: actions/checkout@v3

      - name: Instalar dependencias Python (Bandit/Pylint)
        run: pip install bandit pylint

      - name: Bandit (reporte HTML)
        run: bandit -r dsvpwa -f html -o bandit_report.html || true

      - name: Pylint
        run: pylint dsvpwa/*.py || true

      - name: SonarQube Scanner (local)
        run: sonar-scanner || true

      - name: Subir reporte Bandit
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit_report.html

  # --------------------
  # 2) DAST (din√°mico)
  # --------------------
  dast:
    runs-on: self-hosted
    needs: sast

    steps:
      - name: Checkout del c√≥digo
        uses: actions/checkout@v3

      # Build r√°pido (sin inspect que a veces cuelga)
      - name: Construir imagen Docker si no existe
        shell: bash
        run: |
          IMAGE_ID=$(docker images -q dsvpwa)
          if [ -z "$IMAGE_ID" ]; then
            echo "üõ† Construyendo imagen 'dsvpwa'..."
            docker build -t dsvpwa .
          else
            echo "‚úÖ Imagen 'dsvpwa' ya existente: $IMAGE_ID"
          fi

      # Reusar 65413 si ya est√° en uso; si no, asignar puerto host din√°mico
      - name: Arrancar app (reusar 65413 o puerto din√°mico)
        id: start
        shell: bash
        run: |
          if lsof -iTCP:65413 -sTCP:LISTEN >/dev/null; then
            echo "start_container=false" >> $GITHUB_ENV
            echo "TARGET_URL=http://127.0.0.1:65413" >> $GITHUB_ENV
            echo "üîÅ Reusando servicio existente en 65413"
          else
            docker rm -f vulnerable-app >/dev/null 2>&1 || true
            # Puerto host din√°mico (evita conflictos): 127.0.0.1::65413
            docker run -d --name vulnerable-app -p 127.0.0.1::65413 dsvpwa
            HOST_PORT=$(docker port vulnerable-app 65413/tcp | awk -F: '{print $2}')
            echo "start_container=true" >> $GITHUB_ENV
            echo "HOST_PORT=$HOST_PORT" >> $GITHUB_ENV
            echo "TARGET_URL=http://127.0.0.1:${HOST_PORT}" >> $GITHUB_ENV
            echo "üöÄ App levantada en puerto din√°mico ${HOST_PORT}"
          fi
          echo "TARGET_URL=$TARGET_URL"

      - name: Healthcheck HTTP
        shell: bash
        run: |
          echo "‚åõ Esperando $TARGET_URL"
          for i in {1..20}; do
            if curl -s -f "$TARGET_URL" >/dev/null; then
              echo "‚úî Aplicaci√≥n en l√≠nea: $TARGET_URL"
              exit 0
            fi
            echo "‚è≥ Esperando..."
            sleep 2
          done
          echo "‚ùå No respondi√≥ a tiempo"
          if [ "${start_container:-false}" = "true" ]; then
            docker logs vulnerable-app || true
          fi
          exit 1

      # ZAP local, con home aislado (-dir) y reporte en tu carpeta + workspace
      - name: ZAP local (home aislado y salida en tu carpeta)
        shell: bash
        env:
          OUT_DIR: "/Users/diegomcdowell/Documents/CAPACITACIONES/2025/CODIGO SEGURO/MODULO 5/SESION_9/CODIGO"
        run: |
          ZAP_HOME_DIR="$RUNNER_TEMP/zap_home_$GITHUB_RUN_ID"
          mkdir -p "$ZAP_HOME_DIR" "$OUT_DIR"

          OUT_FILE="$OUT_DIR/zap_report.html"
          LOG_FILE="$GITHUB_WORKSPACE/zap_run.log"

          echo "Usando ZAP_HOME: $ZAP_HOME_DIR"
          echo "Reporte saldr√° en: $OUT_FILE"

          "/Applications/ZAP.app/Contents/MacOS/ZAP.sh" \
            -cmd \
            -dir "$ZAP_HOME_DIR" \
            -port 8095 \
            -host 127.0.0.1 \
            -config api.disablekey=true \
            -quickurl "$TARGET_URL" \
            -quickout "$OUT_FILE" \
            -quickprogress 2>&1 | tee "$LOG_FILE" || true

          # Copiamos al workspace para subirlo como artefacto
          cp -f "$OUT_FILE" "$GITHUB_WORKSPACE/zap_report.html" 2>/dev/null || true

          echo "Contenido OUT_DIR:"
          ls -lah "$OUT_DIR" || true
          echo "Contenido WORKSPACE:"
          ls -lah "$GITHUB_WORKSPACE" || true

      - name: Verificar reporte ZAP (mostrar log si falla)
        shell: bash
        run: |
          if [ -f "$GITHUB_WORKSPACE/zap_report.html" ]; then
            echo "‚úî Reporte ZAP generado: $GITHUB_WORKSPACE/zap_report.html"
          else
            echo "‚ùå Reporte ZAP NO generado. √öltimas l√≠neas del log:"
            tail -n 200 "$GITHUB_WORKSPACE/zap_run.log" || true
            exit 1
          fi

      - name: Subir artefactos ZAP (reporte + log)
        uses: actions/upload-artifact@v4
        with:
          name: zap-output
          path: |
            zap_report.html
            zap_run.log

      - name: Cleanup (solo si lo levant√≥ el job)
        if: always()
        shell: bash
        run: |
          if [ "${start_container:-false}" = "true" ]; then
            docker rm -f vulnerable-app || true
          fi
