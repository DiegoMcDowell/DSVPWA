name: CI/CD con SAST y DAST para DSVPWA

on: [push, pull_request]

jobs:
  sast:
    runs-on: self-hosted

    steps:
      - name: Checkout del c√≥digo
        uses: actions/checkout@v3

      - name: Instalar dependencias Python
        run: pip install bandit pylint

      - name: Analizar con Bandit
        run: bandit -r dsvpwa -f html -o bandit_report.html || true

      - name: Analizar con Pylint
        run: pylint dsvpwa/*.py || true

      - name: Ejecutar SonarQube Scanner (local)
        run: sonar-scanner || true

      - name: Subir reporte Bandit
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit_report.html

  dast:
    runs-on: self-hosted
    needs: sast
    steps:
      - uses: actions/checkout@v3

      - name: Build imagen (si no existe)
      # usa listado local (r√°pido) en vez de inspect (a veces se cuelga)
        run: |
          IMAGE_ID=$(docker images -q dsvpwa)
          if [ -z "$IMAGE_ID" ]; then
            echo "üõ† Construyendo imagen 'dsvpwa'..."
            docker build -t dsvpwa .
          else
            echo "‚úÖ Imagen 'dsvpwa' ya existente: $IMAGE_ID"
          fi

      - name: Arrancar app (reusar 65413 o asignar puerto din√°mico)
        id: start
        shell: bash
        run: |
          # ¬øYa hay algo escuchando en 65413? Re√∫salo.
          if lsof -iTCP:65413 -sTCP:LISTEN >/dev/null; then
            echo "start_container=false" >> $GITHUB_ENV
            echo "TARGET_URL=http://127.0.0.1:65413" >> $GITHUB_ENV
            echo "üîÅ Reusando servicio existente en 65413"
          else
            # Limpia contenedor previo con ese nombre por si qued√≥ colgado
            docker rm -f vulnerable-app >/dev/null 2>&1 || true
            # Mapea puerto host din√°mico (host elige un puerto libre)
            docker run -d --name vulnerable-app -p 127.0.0.1::65413 dsvpwa
            # Descubre el puerto host asignado (p.ej. 127.0.0.1:49123->65413/tcp)
            HOST_PORT=$(docker port vulnerable-app 65413/tcp | sed 's/.*://')
            echo "start_container=true" >> $GITHUB_ENV
            echo "HOST_PORT=$HOST_PORT" >> $GITHUB_ENV
            echo "TARGET_URL=http://127.0.0.1:${HOST_PORT}" >> $GITHUB_ENV
            echo "üöÄ App levantada en puerto din√°mico ${HOST_PORT}"
          fi

      - name: Healthcheck HTTP
        shell: bash
        run: |
          echo "‚åõ Esperando $TARGET_URL"
          for i in {1..20}; do
            if curl -s -f "$TARGET_URL" >/dev/null; then
              echo "‚úî Aplicaci√≥n en l√≠nea: $TARGET_URL"
              exit 0
            fi
            echo "‚è≥ Esperando..."
            sleep 2
          done
          echo "‚ùå No respondi√≥ a tiempo"
          if [ "${start_container:-false}" = "true" ]; then
            docker logs vulnerable-app || true
          fi
          exit 1

      # Usa tu ZAP local (sin descargar imagen gigante cada vez)
      - name: ZAP local (sin Docker)
        run: |
          /Applications/ZAP.app/Contents/MacOS/ZAP.sh \
            -cmd -quickurl "$TARGET_URL" \
            -quickout zap_report.html \
            -quickprogress || true

      - name: Verificar reporte ZAP
        run: |
          test -f zap_report.html || (echo "‚ùå Reporte ZAP NO generado" && exit 1)
          echo "‚úî Reporte ZAP generado"

      - name: Subir reporte ZAP
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html

      - name: Cleanup (solo si lo levant√≥ el job)
        if: always()
        run: |
          if [ "${start_container:-false}" = "true" ]; then
            docker rm -f vulnerable-app || true
          fi
